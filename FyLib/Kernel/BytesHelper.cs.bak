

// BytesHelper
using FyLib;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

/// <summary>
/// Bytes扩展操作
/// </summary>
public static class BytesHelper
{

    /// <summary>
    /// 短整数到字节数组
    /// </summary>
    public static byte[] ToBin(short s)
    {
        return BitConverter.GetBytes(s).Reverse();
    }

    /// <summary>
    /// 无符号短整数到字节数组
    /// </summary>
    public static byte[] ToBin(ushort s)
    {
        return BitConverter.GetBytes(s).Reverse();
    }

    /// <summary>
    /// 整数到字节数组
    /// </summary>
    public static byte[] ToBin(int i)
    {
        return BitConverter.GetBytes(i).Reverse();
    }

    /// <summary>
    /// 无符号整数到字节数组
    /// </summary>
    public static byte[] ToBin(uint i)
    {
        return BitConverter.GetBytes(i).Reverse();
    }

    /// <summary>
    /// 长整数到字节数组
    /// </summary>
    public static byte[] ToBin(long l)
    {
        return BitConverter.GetBytes(l).Reverse();
    }

    /// <summary>
    /// 无符号长整数到字节数组
    /// </summary>
    public static byte[] ToBin(ulong l)
    {
        return BitConverter.GetBytes(l).Reverse();
    }

    /// <summary>
    /// 单精度浮点型到字节数组
    /// </summary>
    public static byte[] ToBin(float f)
    {
        return BitConverter.GetBytes(f).Reverse();
    }

    /// <summary>
    /// 双精度浮点型到字节数组
    /// </summary>
    public static byte[] ToBin(double d)
    {
        return BitConverter.GetBytes(d).Reverse();
    }

    /// <summary>
    /// 字符串转到字节数组
    /// </summary>
    public static byte[] ToBin(string str)
    {
        return Encoding.Default.GetBytes(str);
    }

    /// <summary>
    /// 2位字节集到短整数
    /// </summary>
    public static short ToShort(byte[] b)
    {
        return BitConverter.ToInt16(b.Reverse(), 0);
    }

    /// <summary>
    /// 2位字节集到无符号短整数
    /// </summary>
    public static ushort ToUShort(byte[] b)
    {
        return BitConverter.ToUInt16(b.Reverse(), 0);
    }

    /// <summary>
    /// 4为字节集到整形
    /// </summary>
    public static int ToInt(this byte[] bin, bool IsFlip = true)
    {
        var array = bin.ToArray();
        if (IsFlip)
        {
            array = array.Reverse();
        }
        if (array.Length == 2)
        {
            return BitConverter.ToUInt16(array, 0);
        }
        return BitConverter.ToInt32(array, 0);
    }

    /// <summary>
    /// 4为字节集到无符号整形
    /// </summary>
    public static uint ToUInt(this byte[] bin)
    {
        return BitConverter.ToUInt32(bin.ToArray().Reverse(), 0);
    }

    /// <summary>
    /// 8位字节到长整形
    /// </summary>
    public static long ToLong(this byte[] b)
    {
        b.ToArray();
        return BitConverter.ToInt64(b.Reverse(), 0);
    }

    /// <summary>
    /// IP地址转换为字节集
    /// </summary>
    /// <param name="ipStr"></param>
    /// <returns></returns>
    public static byte[]? IP2Bin(string ipStr)
    {
        if (ipStr == null)
        {
            return null;
        }
        var array = ipStr.Split(new char[1] { '.' });
        if (array.Length != 4)
        {
            return null;
        }
        var array2 = array;
        foreach (var str in array2)
        {
            if ((str.ToInt() > 255) | (str.ToInt() < 0))
            {
                return null;
            }
        }
        var array3 = new byte[4];
        checked
        {
            array3[3] = (byte)uint.Parse(array[3]);
            array3[2] = (byte)uint.Parse(array[2]);
            array3[1] = (byte)uint.Parse(array[1]);
            array3[0] = (byte)uint.Parse(array[0]);
            return array3;
        }
    }

    /// <summary>
    /// 转换为IP地址
    /// </summary>
    /// <param name="bin"></param>
    /// <returns></returns>
    public static string ToIP(this byte[] bin)
    {
        if (bin.Length != 4)
        {
            return "";
        }
        return string.Concat(string.Concat(bin[0] + "." + bin[1], ".", bin[2].ToString()), ".", bin[3].ToString());
    }

    /// <summary>
    /// 8位字节到无符号长整形
    /// </summary>
    public static ulong ToULong(byte[] b)
    {
        return BitConverter.ToUInt64(b.Reverse(), 0);
    }

    /// <summary>
    /// 4位字节到单精度浮点型
    /// </summary>
    public static float ToFloat(byte[] b)
    {
        return BitConverter.ToSingle(b.Reverse(), 0);
    }

    /// <summary>
    /// 8位字节到双精度浮点型
    /// </summary>
    public static double ToDouble(byte[] b)
    {
        return BitConverter.ToDouble(b.Reverse(), 0);
    }

    /// <summary>
    /// 转换为文本
    /// </summary>
    /// <param name="b"></param>
    /// <param name="encoding">编码</param>
    /// <returns></returns>
    public static string ToStr(this byte[] b, Encoding encoding)
    {
        return encoding.GetString(b);
    }

    /// <summary>
    /// 转换为文本
    /// </summary>
    /// <param name="bin"></param>
    /// <returns></returns>
    public static string ToStr(this byte[] bin)
    {
        return Encoding.Default.GetString(bin);
    }
}
